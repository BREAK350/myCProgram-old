//---------------------------------------------------------------------------
#pragma hdrstop
#include "Details.h"
#pragma package(smart_init)
/********************************T_Attack***********************************/
T_Attack::T_Attack()
{
    Power=0;
    SW=new T_SuperWeapon;
}
//---------------------------------------------------------------------------
T_Attack::T_Attack(const T_Attack &a)
{
    Power=a.Power;
    SW=new T_SuperWeapon(*a.SW);
}
//---------------------------------------------------------------------------
T_Attack::T_Attack(const float &p,const T_SuperWeapon &sw)
{
    Power=p;
    SW=new T_SuperWeapon(sw);
}
//---------------------------------------------------------------------------
void T_Attack::Interaction(const T_Protection &p)
{
    Power=Power-p.Power;
    if(Power<0)
    {
        Power=0;
    }
}
//---------------------------------------------------------------------------
T_Attack::~T_Attack()
{
    Power=0;
    delete SW;
    SW=NULL;
}
//---------------------------------------------------------------------------
T_Attack& T_Attack::operator = (const T_Attack &a)
{
    if(this!=&a)
    {
        Power=a.Power;
        *SW=*a.SW;
    }
    return *this;
}
//---------------------------------------------------------------------------
T_Attack T_Attack::Fault()
{
    return T_Attack(Power*FAULT,*SW);
}
//---------------------------------------------------------------------------
/*******************************T_Character*********************************/
T_Character::T_Character()
{
    Elasticity=0;
    Power=0;
    Felicity=0;
    Strength=0;
    Reaction=0;
    Speed=0;
}
//---------------------------------------------------------------------------
T_Character::T_Character(const T_Character &c)
{
    Elasticity=c.Elasticity;
    Power=c.Power;
    Felicity=c.Felicity;
    Strength=c.Strength;
    Reaction=c.Reaction;
    Speed=c.Speed;
}
//---------------------------------------------------------------------------
T_Character::T_Character(const float &e,const float &p,const float &f,const float &s,
                         const float &r,const float &sp)
{
    Elasticity=e;
    Power=p;
    Felicity=f;
    Strength=s;
    Reaction=r;
    Speed=sp;
}
//---------------------------------------------------------------------------
T_Character::~T_Character()
{
    Elasticity=0;
    Power=0;
    Felicity=0;
    Strength=0;
    Reaction=0;
    Speed=0;
}
//---------------------------------------------------------------------------
T_Character& T_Character::operator = (const T_Character &c)
{
    if(this!=&c)
    {
        Elasticity=c.Elasticity;
        Power=c.Power;
        Felicity=c.Felicity;
        Strength=c.Strength;
        Reaction=c.Reaction;
        Speed=c.Speed;
    }
    return *this;
}
//---------------------------------------------------------------------------
T_Attack T_Character::GetAttack()
{
    return T_Attack(Elasticity+Power+Felicity+Speed,T_SuperWeapon());
}
//---------------------------------------------------------------------------
T_Protection T_Character::GetProtection()
{
    return T_Protection(Elasticity+Strength+Reaction+Speed);
}
//---------------------------------------------------------------------------
void T_Character::Interaction(const T_Attack &a)
{
    Interaction(a.SW->Type);
}
//---------------------------------------------------------------------------
void T_Character::Interaction(const T_Character &c)
{
    Elasticity-=c.Elasticity;
    Power-=c.Power;
    Felicity-=c.Felicity;
    Strength-=c.Strength;
    Reaction-=c.Reaction;
    Speed-=c.Speed;
}
//---------------------------------------------------------------------------
/*****************************T_SuperWeapon*********************************/
T_SuperWeapon::T_SuperWeapon():Type()
{
    Power=0;
}
//---------------------------------------------------------------------------
T_SuperWeapon::T_SuperWeapon(const T_SuperWeapon &sw):Type(sw.Type)
{
    Power=sw.Power;
}
//---------------------------------------------------------------------------
T_SuperWeapon::T_SuperWeapon(const float &p,const T_Character &t):Type(t)
{
    Power=p;
}
//---------------------------------------------------------------------------
T_SuperWeapon& T_SuperWeapon::operator = (const T_SuperWeapon &sw)
{
    if(this!=&sw)
    {
        Power=sw.Power;
        Type=sw.Type;
    }
    return *this;
}
//---------------------------------------------------------------------------
/******************************T_Protection*********************************/
T_Protection::T_Protection()
{
    Power=0;
}
//---------------------------------------------------------------------------
T_Protection::T_Protection(const T_Protection &p)
{
    Power=p.Power;
}
//---------------------------------------------------------------------------
T_Protection::T_Protection(const float &p)
{
    Power=p;
}
//---------------------------------------------------------------------------
T_Protection& T_Protection::operator = (const T_Protection &p)
{
    if(this!=&p)
    {
        Power=p.Power;
    }
    return *this;
}
//---------------------------------------------------------------------------
T_Protection T_Protection::Fault()
{
    return T_Protection(Power*FAULT);
}
//---------------------------------------------------------------------------
/*********************************T_Life************************************/
T_Life::T_Life()
{
    Amount=0;
}
//---------------------------------------------------------------------------
T_Life::T_Life(const T_Life &l)
{
    Amount=l.Amount;
}
//---------------------------------------------------------------------------
T_Life::T_Life(const float &a)
{
    Amount=a;
}
//---------------------------------------------------------------------------
T_Life& T_Life::operator = (const T_Life &l)
{
    if(this!=&l)
    {
        Amount=l.Amount;
    }
    return *this;
}
//---------------------------------------------------------------------------
void T_Life::Interaction(const T_Attack &a)
{
    Amount=Amount-a.Power;
}
//---------------------------------------------------------------------------
/********************************T_Stomach**********************************/
T_Stomach::T_Stomach()
{
    Size=0;
}
//---------------------------------------------------------------------------
T_Stomach::T_Stomach(const T_Stomach &s)
{
    Size=s.Size;
}
//---------------------------------------------------------------------------
T_Stomach::T_Stomach(const float &s)
{
    Size=s;
}
//---------------------------------------------------------------------------
T_Stomach& T_Stomach::operator = (const T_Stomach &s)
{
    if(this!=&s)
    {
        Size=s.Size;
    }
    return *this;
}
//---------------------------------------------------------------------------
void T_Stomach::Interaction(const T_Attack &a)
{
}
//---------------------------------------------------------------------------
/********************************T_Energy***********************************/
T_Energy::T_Energy()
{
    Amount=0;
}
//---------------------------------------------------------------------------
T_Energy::T_Energy(const T_Energy &e)
{
    Amount=e.Amount;
}
//---------------------------------------------------------------------------
T_Energy::T_Energy(const float &a)
{
    Amount=a;
}
//---------------------------------------------------------------------------
T_Energy& T_Energy::operator = (const T_Energy &e)
{
    if(this!=&e)
    {
        Amount=e.Amount;
    }
    return *this;
}
//---------------------------------------------------------------------------
void T_Energy::Interaction(const T_Attack &a)
{
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
