//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
TMatrix::TMatrix()
{
    n=0;
    m=NULL;
    p=NULL;
}
//---------------------------------------------------------------------------
TMatrix::TMatrix(int _n)
{
    int i,j;
    n=_n+2;
    m=new char*[n];
    p=new char*[n];
    for(i=0;i<n;i++)
    {
        m[i]=new char[n];
        p[i]=new char[n];
        for(j=0;j<n;j++)
        {
            m[i][j]=' ';
            p[i][j]=0;
        }
    }
}
//---------------------------------------------------------------------------
TMatrix::~TMatrix()
{
    int i;
    for(i=0;i<n;i++)
    {
        delete m[i];
        delete p[i];
    }
    delete m;
    delete p;
}
//---------------------------------------------------------------------------
TWord::TWord()
{
    int i;
    n=0;
    for(i=0;i<20;i++)
    {
        s[i]=0;
    }
}
//---------------------------------------------------------------------------
void TMatrix::Create(TWord &max,TWord &w,int _i,int _j)
{
    //if()
}
//---------------------------------------------------------------------------
void TMatrix::SearchFirstSymbol(int &_i,int &_j)
{
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(m[i][j]!=' ')
            {
                _i=i;
                _j=j;
                return;
            }
        }
    }
}
//---------------------------------------------------------------------------
void TMatrix::NextSymbol(TWord &max,TWord &w,int i,int j,TWords &sl,int &d)
{
    if(n>=19)
    {
        return;
    }
    if(m[i][j]!=' ')
    {
        if(p[i][j]==0)
        {
            w.s[w.n]=m[i][j];
            w.k[w.n].i=i;
            w.k[w.n].j=j;
            p[i][j]=1;
            w.n++;
            w.s[w.n]=0;
            if(w.n>max.n && sl.SearchWord(w.s))
            {
                max=w;
            }
            NextSymbol(max,w,i,j+1,sl,d);
            NextSymbol(max,w,i+1,j,sl,d);
            NextSymbol(max,w,i,j-1,sl,d);
            NextSymbol(max,w,i-1,j,sl,d);
        }
        else
        {
            return;
        }
    }
    else
    {
        if(d==1)
        {
            return;
        }

    }
}
//---------------------------------------------------------------------------
void TWord::operator = (TWord &w)
{
    int i;
    if(this==&w)
    {
        return;
    }
    n=w.n;
    for(i=0;i<n;i++)
    {
        s[i]=w.s[i];
        k[i]=w.k[i];
    }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 