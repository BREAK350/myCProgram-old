//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit3.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Dictionary::T_Dictionary():W(0)
{
    N=0;
}
//---------------------------------------------------------------------------
T_Dictionary::T_Dictionary(const char *fname)
{
    FILE *f=fopen(fname,"rt");
    if(f)
    {
        fscanf(f,"%d\n",&N);
        if(N>0)
        {
            const int max=32;
            int i=0;
            char buf[max];
            W=new char*[N];
            while(i<N)
            {
                fscanf(f,"%s\n",buf);
                W[i]=strdup(buf);
                i++;
            }
        }
        else
        {
            N=0;
            W=NULL;
        }
    }
    else
    {
        N=0;
        W=NULL;
    }
}
//---------------------------------------------------------------------------
T_Dictionary::~T_Dictionary()
{
    int i;
    for(i=0;i<N;i++)
    {
        delete W[i];
    }
    delete W;
    W=NULL;
    N=0;
}
//---------------------------------------------------------------------------
int T_Dictionary::SearchPathWord(const char *pw)const
{
    int row=0,pos=0;
    int Size=strlen(pw);
    while(row<N && pos!=-1 && pos!=Size)
    {
        pos=SearchPathWord(row,pw);
        row++;
    }
    if(row>=N)
    {
        pos=0;
    }
    return pos;
}
//---------------------------------------------------------------------------
int T_Dictionary::SearchPathWord(const int &row,const char *pw)const // row >=0 && row <N
{
    int i=0;
    while(pw[i] && pw[i]==W[row][i])
    {
        i++;
    }
    if(W[row][i]==0 && pw[i]==0)
    {
        i=-1;
    }
    return i;
}
//---------------------------------------------------------------------------
char* T_Dictionary::operator [] (const int &n)
{
    char *r=NULL;
    if(n>=0 && n<N)
    {
        r=strdup(W[n]);
    }
    return r;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 