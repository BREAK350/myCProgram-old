//---------------------------------------------------------------------------
#pragma hdrstop
#include "dictionary.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Dictionary::T_Dictionary():W(0)
{
    N=0;
}
//---------------------------------------------------------------------------
T_Dictionary::T_Dictionary(const char *fname)
{
    if(LoadFromFile(fname)==0)
    {
        N=0;
        W=NULL;
    }
}
//---------------------------------------------------------------------------
T_Dictionary::~T_Dictionary()
{
    Delete();
    W=NULL;
    N=0;
}
//---------------------------------------------------------------------------
const char* T_Dictionary::operator [] (const int &n)const
{
    char *r=NULL;
    if(n>=0 && n<N)
    {
        r=W[n];
    }
    return r;
}
//---------------------------------------------------------------------------
T_Dictionary::T_Dictionary(const T_Dictionary &d)
{
    N=d.N;
    if(N>0)
    {
        int i;
        W=new char*[N];
        for(i=0;i<N;i++)
        {
            W[i]=strdup(d.W[i]);
        }
    }
    else
    {
        W=NULL;
    }
}
//---------------------------------------------------------------------------
void T_Dictionary::Delete()
{
    int i;
    if(W)
    {
        for(i=0;i<N;i++)
        {
            delete W[i];
        }
    }
    delete W;
    Used.Delete();
}
//---------------------------------------------------------------------------
int T_Dictionary::LoadFromFile(const char *fname)
{
    int q=0;
    ifstream F(fname);
    if(F.is_open())
    {
        int n;
        F>>n;
        if(n>0)
        {
            q=1;
            Delete();
            N=n;
            const int max=32;
            int i=0;
            char buf[max];
            W=new char*[N];
            while(i<N)
            {
                F>>buf;
                W[i]=strdup(buf);
                i++;
            }
        }
        F.close();
    }
    return q;
}
//---------------------------------------------------------------------------
const char* T_Dictionary::GetRandomWord()
{
    char *r=NULL;
    if(W)
    {
        randomize();
        int i=random(N);
        Used.Add(i);
        r=W[i];
    }
    return r;
}
//---------------------------------------------------------------------------
int T_Dictionary::Add(const char *word)
{
    int i=SearchWord(word);
    if(i!=-1)
    {
        Used.Add(i);
    }
    return i;
}
//---------------------------------------------------------------------------
int T_Dictionary::SearchWord(const char *word)
{
    int i=0;
    while(i<N && strcmp(word,W[i])!=0)
    {
        i++;
    }
    if(i>=N)
    {
        i=-1;
    }
    return i;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
