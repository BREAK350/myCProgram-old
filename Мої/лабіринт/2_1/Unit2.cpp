//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
TMatrix::TMatrix()
{
    N=M=0;
    E=NULL;
}
//---------------------------------------------------------------------------
TMatrix::~TMatrix()
{
    int i;
    for(i=0;i<N;i++)
    {
        delete E[i];
    }
    delete E;
    E=NULL;
}
//---------------------------------------------------------------------------
void TMatrix::SaveToFile(FILE *f)
{
    int i;
    for(i=0;i<N;i++)
    {
        fwrite(E[i],M,sizeof(TElem),f);
    }
}
//---------------------------------------------------------------------------
void TMatrix::SaveToFile(char *fname)
{
    FILE *f;
    f=fopen(fname,"wb");
    fwrite(&N,1,sizeof(int),f);
    fwrite(&M,1,sizeof(int),f);
    SaveToFile(f);
    fclose(f);
}
//---------------------------------------------------------------------------
void TMatrix::LoadFromFile(FILE *f)
{
    int i;
    for(i=0;i<N;i++)
    {
        fread(E[i],M,sizeof(TElem),f);
    }
}
//---------------------------------------------------------------------------
void TMatrix::LoadFromFile(char *fname)
{
    int n,m;
    FILE *f;
    f=fopen(fname,"rb");
    if(!f)
    {
        return;
    }
    fread(&n,1,sizeof(int),f);
    fread(&m,1,sizeof(int),f);
    if(n<1 || m<1)
    {
        return;
    }
    Delete();
    Create(n,m,ROAD);
    LoadFromFile(f);
    fclose(f);
}
//---------------------------------------------------------------------------
void TMatrix::Create(int n,int m,int Type)
{
    int i,j;
    if(n<1 || m<1)
    {
        return;
    }
    Delete();
    N=n;
    M=m;
    E=new TElem*[N];
    for(i=0;i<N;i++)
    {
        E[i]=new TElem[M];
        for(j=0;j<M;j++)
        {
            E[i][j]=Type;
        }
    }
}
//---------------------------------------------------------------------------
void TMatrix::Delete()
{
    int i;
    for(i=0;i<N;i++)
    {
        delete E[i];
    }
    delete E;
    E=NULL;
    N=0;
    M=0;
}
//---------------------------------------------------------------------------
void TMatrix::Insert(TMatrix &Mx,int I,int J)
{
    int i,j,mN,mM;
    mN=(N>I+Mx.N)?(I+Mx.N):(N);
    mM=(M>J+Mx.M)?(J+Mx.M):(M);
    for(i=(I>=0)?(I):(0);i<mN;i++)
    {
        for(j=(J>=0)?(J):(0);j<mM;j++)
        {
            E[i][j]=Mx.E[i-I][j-J];
        }
    }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 