//---------------------------------------------------------------------------
#pragma hdrstop
#include "PlayerH.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
TPlayer::TPlayer():TLabirynt()
{
    pP=pX=pY=0;
}
//---------------------------------------------------------------------------
TPlayer::~TPlayer()
{
}
//---------------------------------------------------------------------------
int TPlayer::Move(int Where)
{
    switch(GetElement(pP,pY,pX))
    {
        case HALFWALL:
            L[pP][pY][pX]=WALL;
            break;
    }
    switch(Where)
    {
        case RIGHT:
            if(pX<mM-1 && CanGo(pP,pY,pX+1))
            {
                pX++;
            }
            break;
        case DOWN:
            if(pY<mN-1 && CanGo(pP,pY+1,pX))
            {
                pY++;
            }
            break;
        case LEFT:
            if(pX>0 && CanGo(pP,pY,pX-1))
            {
                pX--;
            }
            break;
        case UP:
            if(pY>0 && CanGo(pP,pY-1,pX))
            {
                pY--;
            }
            break;
    }
    switch(GetElement(pP,pY,pX))
    {
        case GOUP:
            pP++;
            break;
        case GODOWN:
            pP--;
            break;
    }
    return GetElement(pP,pY,pX);
}
//---------------------------------------------------------------------------
void TPlayer::Draw(int x,int y,TCanvas *Canvas)
{
    MapClear();
    CreatePicture(pP,pX,pY);
    DrawElement(PLAYER,dM*Scale,dN*Scale,(dM+1)*Scale,(dN+1)*Scale);
    TLabirynt::Draw(x,y,Canvas);
}
//---------------------------------------------------------------------------
void TPlayer::RandomMatrix(int p)
{
    TMatrix::RandomMatrix(p);
}
//---------------------------------------------------------------------------
void TPlayer::GetSize(int &x,int &y)
{
    x=(2*dM+1)*Scale;
    y=(2*dN+1)*Scale;
}
//---------------------------------------------------------------------------
void TPlayer::LoadFromFile(char *fname)
{
    bool b;
    b=TMatrix::LoadFromFile(fname);
    if(b)
    {
        fName=fname;
    }
    SearchRandomBEGIN(pP,pX,pY);
}
//---------------------------------------------------------------------------
void TPlayer::LoadFromFileAgain()
{
    TMatrix::LoadFromFile(fName.c_str());
    SearchRandomBEGIN(pP,pX,pY);
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 