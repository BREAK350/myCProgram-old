//---------------------------------------------------------------------------

#ifndef Unit2H
#define Unit2H
#include <System.hpp>
#include <vector>
#include <utility>
typedef std::pair<int,String> IdentifiedWord;
typedef std::vector<String> Words;
typedef std::vector<int> IDs;
typedef std::vector<IdentifiedWord> IdentifiedWords;
//---------------------------------------------------------------------------
/*
вимоги
1. перекласти слово, точно ≥ приблизно (Like)
2. додати слово (без повторень)
3. перекласти слово (зв'€зати англ з укр, без повторень)
4. редагувати слово та переклад
5. видал€ти слово та переклад
6. отримати неперекладен≥ слова
7.
*/
/*
публ≥чн≥ методи
	addEngWord(String word); додаЇ слово в таблицю англ≥йських сл≥в.
		якщо таке слово уже Ї, то не додаЇ.

	addUkrWord(String word); додаЇ слово в таблицю украњнських сл≥в.
		якщо таке слово уже Ї, то не додаЇ.

	addEngTranslation(String eng, Words ukr); додаЇ переклад
		дл€ англ≥йського слова. якщо масив *ukr пустий, то викликаЇтьс€
		метод addEngWord(eng);

	addUkrTranslation(String ukr, Words eng); аналог≥чно
		addEngTranslation, але дл€ украњнського слова.

приватн≥ методи
	std::vector<int> getIdFromEngWords(std::vector<String> eng); // повертаЇ
		масив ≥ндекс≥в, що в≥дпов≥дають ≥дентиф≥катору в≥дпов≥дного
		слова у баз≥ даних. якщо такого слова нема, то ≥дентиф≥катор = -1.

	String createConditionFor(const Words &words);// створюЇ р€док типу:
		"value=words[0] or value=words[1] or ...".
*/
//---------------------------------------------------------------------------
IDs getIdFromEngWords(const Words &eng);
// or
void writeIdFromEngWords(IdentifiedWords &idWords);
String createConditionFor(const String &value,const Words &words);
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
#endif
