//---------------------------------------------------------------------------
#pragma hdrstop
#include "func.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
TWords::TWords()
{
}
//---------------------------------------------------------------------------
TWords::TWords(const StringVector &words)
{
	add(words);
}
//---------------------------------------------------------------------------
bool TWords::contains(const String &word)
{
	return words.count(word);
}
//---------------------------------------------------------------------------
bool TWords::add(const String &word)
{
	return words.insert(word).second;
}
//---------------------------------------------------------------------------
int TWords::add(const StringVector &words)
{
	int size = words.size();
	int added = 0;
	for(int i=0; i < size; i++)
	{
		added += add(words[i]);
	}
	return added;
}
//---------------------------------------------------------------------------
void TWords::remove(const String &word)
{
	words.erase(word);
}
//---------------------------------------------------------------------------
void TWords::remove(const StringVector &words)
{
	int size = words.size();
    for(int i=0; i < size; i++)
	{
		remove(words[i]);
	}
}
//---------------------------------------------------------------------------
StringVector TWords::toStringVector()
{
	StringVector svWords;
	for(StringSet::iterator i = words.begin(); i != words.end(); i++)
	{
		svWords.push_back(*i);
	}
	return svWords;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
StringVector readWordsFrom(const char *text)
{
	StringVector sv;
	char line[1024];
	int begin = 0;
	while(*(text + begin) && sscanf(text + begin,"%s",line))
	{
		begin += strlen(line) + 1;
		//removeWrongSymbols(line);
		if(line[0])
		{
			sv.push_back(String(line));
		}
	}
	return sv;
}
//---------------------------------------------------------------------------
StringVector loadWordsFromFile(const char *fileName)
{
	StringVector sv;
	char line[1024];
	ifstream ifs(fileName);
	while(ifs>>line)
	{
		removeWrongSymbols(line);
		if(line[0])
		{
			sv.push_back(String(line));
		}
	}
	return sv;
}
//---------------------------------------------------------------------------
void removeWrongSymbols(char *line)
{
	int in = 0;
	int out = 0;
	while(line[out])
	{
		while(line[out] && !isCorrectSymbol(line[out]))
		{
			out++;
		}
		line[in] = tolower(line[out]);
		in++;
		out++;
	}
	if(in>0 && line[in-1] == '-')
	{
		in--;
	}
	line[in] = 0;
}
//---------------------------------------------------------------------------
bool isCorrectSymbol(const char &symbol)
{
    return isalpha(symbol) || symbol == '-' || symbol == '\'';
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TMetaWord::TMetaWord():word()
{
	firstPosition = -1;
}
//---------------------------------------------------------------------------
TMetaWord::TMetaWord(const String &word,const int &firstPosition)
{
	this->word = word;
	this->firstPosition = firstPosition;
}
//---------------------------------------------------------------------------
String TMetaWord::getWord()const
{
	return word;
}
//---------------------------------------------------------------------------
int TMetaWord::getFirstPosition()const
{
	return firstPosition;
}
//---------------------------------------------------------------------------
void TMetaWord::setFirstPosition(const int &newPosition)
{
	firstPosition = newPosition;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TWordsTreeItem::TWordsTreeItem(const TMetaWord &value)
{
	this->value = value;
	left = right = NULL;
	count = 1;
}
//---------------------------------------------------------------------------
TWordsTreeItem::TWordsTreeItem(const TMetaWord &value,TWordsTreeItem *left,
		TWordsTreeItem *right)
{
	this->value = value;
	this->left = left;
	this->right = right;
	count = 1;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TpWordTree::TpWordTree(TWordsTreeItem *treeItem)
{
	this->treeItem = treeItem;
}
//---------------------------------------------------------------------------
String TpWordTree::getWord()const
{
	return treeItem->value.getWord();
}
//---------------------------------------------------------------------------
int TpWordTree::getFirstPosition()const
{
	return treeItem->value.getFirstPosition();
}
//---------------------------------------------------------------------------
int TpWordTree::getCount()const
{
	return treeItem->count;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TWordsTree::TWordsTree()
{
    root = NULL;
}
//---------------------------------------------------------------------------
void TWordsTree::add(const TMetaWord &metaWord)
{
	if(root)
	{
		add(root, metaWord);
	}
	else
	{
		root = new TWordsTreeItem(metaWord);
    }
}
//---------------------------------------------------------------------------
void add(TWordsTreeItem *item,const TMetaWord &metaWord)
{
	if(item->value.getWord() == metaWord.getWord())
	{
		item->count++;
		if(item->value.getFirstPosition() > metaWord.getFirstPosition())
		{
			item->value.setFirstPosition(metaWord.getFirstPosition());
		}
	}
	else
	{
		if(metaWord.getWord() > item->value.getWord())
		{
			if(item->right)
			{
				add(item->right, metaWord);
			}
			else
			{
				item->right = new TWordsTreeItem(metaWord);
            }
		}
		else
		{
			if(item->left)
			{
				add(item->left, metaWord);
			}
			else
			{
				item->left = new TWordsTreeItem(metaWord);
            }
		}
	}
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
