//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit1.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
Values::Values()
{
	top = 0;
	cout<<"Values("<<this<<")\n";
}
Values::~Values()
{
	cout<<"~Values("<<this<<")\n";
}
Reference* Values::add(RefObject *refObject)
{
	Reference *ref = new Reference();
	ref->setRefObj(refObject);
	list.add(ref);
	return ref;
}
//---------------------------------------------------------------------------
void Values::remove(RefObject *refObject)
{
	if(top < 4)
	{
		forRemove[top] = refObject;
	}
	else
	{
		remove();
    }
}
//---------------------------------------------------------------------------
void Values::remove()
{
	while(top>=0)
	{
		list.remove(forRemove[top]->getReference());
		top--;
	}
	top = 0;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
RefObject::RefObject()
{
	cout<<"RefObject("<<this<<")\n";
	reference = values.add(this);
}
RefObject::~RefObject()
{
	cout<<"~RefObject("<<this<<")\n";

}
//---------------------------------------------------------------------------
Reference* RefObject::getReference()
{
	return reference;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
Reference::Reference()
{
}
//---------------------------------------------------------------------------
Reference::Reference(Reference *prev, Reference *next)
{
	this->next = next;
	this->prev = prev;
}
//---------------------------------------------------------------------------
void Reference::setRefObj(RefObject *refObj)
{
	this->refObj = refObj;
}
//---------------------------------------------------------------------------
void Reference::remove()
{
	delete refObj;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
RefString::RefString():RefObject()
{
	cout<<"RefString("<<this<<")\n";
}
RefString::~RefString()
{
	cout<<"~RefString("<<this<<")\n";
}
RefString* RefString::toString()
{
	return new RefString();
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
List::List()
{
	first = new Reference(null, null);
	cout<<"List("<<this<<")\n";
}
//---------------------------------------------------------------------------
List::~List()
{
	while(first->next)
	{
        remove(first->next);
	}
	cout<<"~List("<<this<<")\n";
}
//---------------------------------------------------------------------------
void List::add(Reference *reference)
{
	Reference *temp = first->next;
	first->next = reference;
	reference->prev = first;
	reference->next = temp;
	if(temp)
	{
		temp->prev = reference;
	}
	cout<<"List("<<this<<"):add("<<reference<<")\n";
}
//---------------------------------------------------------------------------
void List::remove(Reference *reference)
{
	Reference *temp = reference;
	if(reference->prev)
	{
		reference->prev->next = reference->next;
	}
	if(reference->next)
	{
		reference->next->prev = reference->prev;
	}
	temp->remove();
	delete temp;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
