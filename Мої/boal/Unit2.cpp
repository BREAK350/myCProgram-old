//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"

#pragma package(smart_init)
//---------------------------------------------------------------------------
Alpha Alpha::operator=(float _alpha)
{
 alpha=_alpha;
}
//---------------------------------------------------------------------------
Alpha Alpha::operator+=(float _alpha)
{
 alpha+=_alpha;
}
//---------------------------------------------------------------------------
Alpha Alpha::operator-(float _alpha)
{
 alpha-=_alpha;
}
//---------------------------------------------------------------------------
void Alpha::CheckAlpha()
{
 if(alpha>=360)
   alpha=alpha-360;
 else
   if(alpha<0)
     alpha=360-alpha;
}
//---------------------------------------------------------------------------
float Alpha::degree()
{
 return alpha*M_PI/180;
}
//---------------------------------------------------------------------------
V V::operator=(float _v)
{
 v=_v;
}
//---------------------------------------------------------------------------
float V::value()
{
 return v;
}
//---------------------------------------------------------------------------
CBoal::CBoal()
{
 alpha=0;
 r=0;
 v=0;
 x=0;
 y=0;
}
//---------------------------------------------------------------------------
void CBoal::DrawBoal(int X,int Y,TForm *Form1)
{
 Form1->Canvas->Pen->Color=clBlack;
 Form1->Canvas->Brush->Color=clBlack;
 Form1->Canvas->Ellipse(x-r+X,Y-y-r,x+r+X,Y-y+r);
}
//---------------------------------------------------------------------------
void CBoal::ClearBoal(int X,int Y,TForm *Form1)
{
 Form1->Canvas->Pen->Color=clWhite;
 Form1->Canvas->Brush->Color=clWhite;
 Form1->Canvas->Ellipse(x-r+X,Y-y-r,x+r+X,Y-y+r);
}
//---------------------------------------------------------------------------
void CBoal::Radius(int _r)
{
 r=_r;
}
//---------------------------------------------------------------------------
CBoal::~CBoal()
{
}
//---------------------------------------------------------------------------
void CBoal::Move()
{
 x+=v.value()*cos(alpha.degree());
 y+=v.value()*sin(alpha.degree());
}
//---------------------------------------------------------------------------
TDf TDf::operator=(float _value)
{
 value=_value;
}
//---------------------------------------------------------------------------
float TDf::operator+(float _value)
{
 return value+_value;
}
//---------------------------------------------------------------------------
TDf TDf::operator-(float _value)
{
 value-_value;
}
//---------------------------------------------------------------------------
TDf TDf::operator*(float _value)
{
 value*_value;
}
//---------------------------------------------------------------------------
TDf TDf::operator/(float _value)
{
 value/_value;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

