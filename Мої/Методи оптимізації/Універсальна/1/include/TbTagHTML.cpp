//---------------------------------------------------------------------------
#pragma hdrstop
#include "TbTagHTML.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
/*****class TbContentsHTML*****/

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*****class TbTextHTML*****/
//---------------------------------------------------------------------------
TbTextHTML::TbTextHTML(): text("")
{
}
//---------------------------------------------------------------------------
TbTextHTML::TbTextHTML(const String &text): text(text)
{
}
//---------------------------------------------------------------------------
String TbTextHTML::toString()
{
	return text;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*****class TbParamTagHTML*****/
//---------------------------------------------------------------------------
String TbParamTagHTML::toString()
{
	return "";
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*****class TbTagHTML*****/
//---------------------------------------------------------------------------
TbTagHTML::TbTagHTML(const String &name, const bool &single)
	:name(name)
{
	this->single = single;
	params = NULL;
	contents = NULL;
}
//---------------------------------------------------------------------------
String TbTagHTML::toString()
{
	String res = "";
	if(!name.IsEmpty())
	{
		res = String("<") + name;
		if(params != NULL)
		{
			res = res + " " + params->toString();
		}
		res = res + ">";
		if(contents != NULL)
		{
			res = res + contents->toString();
		}
		if(!single)
		{
            res = res + "</" + name + ">";
        }
    }
	return res;
}
//---------------------------------------------------------------------------
TbTagHTML::TbTagHTML(const String &name, const bool &single,
			TbContentsHTML *params, TbContentsHTML *contents)
			:name(name)
{
	this->single = single;
	this->params = params;
	this->contents = contents;
}
//---------------------------------------------------------------------------
void TbTagHTML::setParams(TbContentsHTML *params)
{
	if(this->params != NULL)
	{
		delete this->params;
	}
	this->params = params;
}
//---------------------------------------------------------------------------
void TbTagHTML::setContents(TbContentsHTML *contents)
{
	if(this->contents != NULL)
	{
		delete this->contents;
	}
	this->contents = contents;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*****class TbContainer*****/
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::addLast(TbContentsHTML *contents)
{
	TbItem *item = new TbItem(contents, this);
	return addLast(item);
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::addFirst(TbContentsHTML *contents)
{
	TbItem *item = new TbItem(contents, this);
	return addFirst(item);
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::addLast(TbItem *item)
{
	if(item)
	{
    	if(last)
		{
			if(last->getNext() == NULL)
			{
				last->addNext(item);
			}
		}
		else
		{
			first = item;
		}
		last = item;
	}
	return item;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::addFirst(TbItem *item)
{
	if(item)
	{
		if(first)
		{
			if(last->getPrev() == NULL)
			{
				first->addPrev(item);
			}
		}
		else
		{
			last = item;
		}
		first = item;
	}
	return item;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbContainerHTML()
{
	first = NULL;
	last = NULL;
}
//---------------------------------------------------------------------------
String TbContainerHTML::toString()
{
	String res = "";
	TbItem *item = first;
	while(item)
	{
		res += item->toString();
		item = item->getNext();
    }
	return res;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::add(TbContentsHTML *contents)
{
	return addLast(contents);
}
//---------------------------------------------------------------------------
bool TbContainerHTML::isFirst(TbItem *item)
{
	return item == first;
}
//---------------------------------------------------------------------------
bool TbContainerHTML::isLast(TbItem *item)
{
	return item == last;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*****class TbContainerHTML::TbItem*****/
//---------------------------------------------------------------------------
TbContainerHTML::TbItem::TbItem(TbContentsHTML *contents, TbContainerHTML *container)
{
	this->contents = contents;
	this->container = container;
	next = NULL;
	prev = NULL;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::addPrev(TbContentsHTML *contents)
{
	TbItem *item = new TbItem(contents, container);
	return addPrev(item);
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::addNext(TbContentsHTML *contents)
{
	TbItem *item = new TbItem(contents, container);
	return addNext(item);
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::addNext(TbItem *item)
{
	if(item)
	{
    	setNext(item);
		if(container->isLast(this))
		{
			container->addLast(item);
		}
	}
	return item;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::addPrev(TbItem *item)
{
	if(item)
	{
    	setPrev(item);
		if(container->isFirst(this))
		{
			container->addFirst(item);
		}
	}
	return item;
}
//---------------------------------------------------------------------------
void TbContainerHTML::TbItem::setNext(TbItem *item)
{
	item->prev = this;
    item->next = this->next;
	if(this->next)
	{
		this->next->prev = item;
	}
	this->next = item;
}
//---------------------------------------------------------------------------
void TbContainerHTML::TbItem::setPrev(TbItem *item)
{
	item->next = this;
	item->prev = this->prev;
	if(this->prev)
	{
		this->prev->next = item;
	}
	this->prev = item;
}
//---------------------------------------------------------------------------
String TbContainerHTML::TbItem::toString()
{
	return contents->toString();
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::getNext()
{
	return next;
}
//---------------------------------------------------------------------------
TbContainerHTML::TbItem* TbContainerHTML::TbItem::getPrev()
{
	return prev;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
