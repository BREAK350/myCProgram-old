//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
void InitTopCube(T_Matrix &M,const gT_Vector &gv)
{
    M.SetSize(8,3);
    M.SetRow(0,gT_Vector( 1+gv.GetX(), 1+gv.GetY(), 1+gv.GetZ()));
    M.SetRow(1,gT_Vector( 1+gv.GetX(), 1+gv.GetY(),-1+gv.GetZ()));
    M.SetRow(2,gT_Vector( 1+gv.GetX(),-1+gv.GetY(), 1+gv.GetZ()));
    M.SetRow(3,gT_Vector(-1+gv.GetX(), 1+gv.GetY(), 1+gv.GetZ()));
    M.SetRow(4,gT_Vector( 1+gv.GetX(),-1+gv.GetY(),-1+gv.GetZ()));
    M.SetRow(5,gT_Vector(-1+gv.GetX(), 1+gv.GetY(),-1+gv.GetZ()));
    M.SetRow(6,gT_Vector(-1+gv.GetX(),-1+gv.GetY(), 1+gv.GetZ()));
    M.SetRow(7,gT_Vector(-1+gv.GetX(),-1+gv.GetY(),-1+gv.GetZ()));
}
//---------------------------------------------------------------------------
void Do2D(const T_Matrix &M,T_Matrix &R)
{
    int i,a=-100,b=-100,c=-10;
    R.SetSize(M.GetSizeRow(),2);
    for(i=0;i<M.GetSizeRow();i++)
    {
        double k=1-M.GetElement(i,0)/a-M.GetElement(i,1)/b;
        if(k>0)
        {
            R.SetElement(i,0,M.GetElement(i,0)/k);
            R.SetElement(i,1,M.GetElement(i,1)/k);
        }
    }
}
//---------------------------------------------------------------------------
void Draw(TCanvas *Canvas,const T_Matrix &M,const double &S)
{
    int i,j;
    for(i=0;i<M.GetSizeRow()-1;i++)
    {
        for(j=i+1;j<M.GetSizeRow();j++)
        {
            double x=M.GetElement(i,0)*S;
            Canvas->MoveTo(x,M.GetElement(i,1)*S);
            Canvas->LineTo(M.GetElement(j,0)*S,M.GetElement(j,1)*S);
        }
    }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 