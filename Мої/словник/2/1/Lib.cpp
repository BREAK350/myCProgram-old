//---------------------------------------------------------------------------
#pragma hdrstop
#include "Lib.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Lib_Word::T_Lib_Word(const char *word)
{
    Word=strdup(word);
    Size=strlen(Word);
}
//---------------------------------------------------------------------------
T_Lib_Word::~T_Lib_Word()
{
    Size=0;
    delete Word;
    Word=NULL;
}
//---------------------------------------------------------------------------
T_Lib_Word::T_Lib_Word(const T_Lib_Word &lw)
{
    Size=lw.Size;
    Word=strdup(lw.Word);
}
//---------------------------------------------------------------------------
T_Lib_Word& T_Lib_Word::operator = (const T_Lib_Word &lw)
{
    if(this!=&lw)
    {
        delete Word;
        Size=lw.Size;
        Word=strdup(lw.Word);
    }
    return *this;
}
//---------------------------------------------------------------------------
int T_Lib_Word::operator == (const T_Lib_Word &lw)const
{
    return !strcmp(Word,lw.Word);
}
//---------------------------------------------------------------------------
void T_Lib_Word::SaveToFile(FILE *f)
{
    fwrite(&Size,sizeof(char),1,f);
    fwrite(Word,sizeof(char),Size,f);
}
//---------------------------------------------------------------------------
void T_Lib_Word::LoadFromFile(FILE *f)
{
    fread(&Size,sizeof(char),1,f);
    Word=new char[Size+1];
    fread(Word,sizeof(char),Size,f);
    Word[Size]=0;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
T_Lib_Words::T_Lib_Words()
{
    AmountWord=0;
    Words=NULL;
}
//---------------------------------------------------------------------------
T_Lib_Words::~T_Lib_Words()
{
    delete[] Words;
    Words=NULL;
    AmountWord=0;
}
//---------------------------------------------------------------------------
int T_Lib_Words::AddWord(const char *word)
{
    UI i,n;
    if(strlen(word)!=0)
    {
        n=SearchWord(word);
        if(n>=AmountWord)
        {
            n=SearchFreeWord();
            if(n<AmountWord)
            {
                ChangeWord(n,word);
            }
            else
            {
                T_Lib_Word *buf=new T_Lib_Word[AmountWord];
                for(i=0;i<AmountWord;i++)
                {
                    buf[i]=Words[i];
                }
                delete[] Words;
                Words=new T_Lib_Word[AmountWord+BUF];
                for(i=0;i<AmountWord;i++)
                {
                    Words[i]=buf[i];
                }
                Words[i]=T_Lib_Word(word);
                AmountWord+=BUF;
            }
        }
    }
    return 1;
}
//---------------------------------------------------------------------------
T_Lib_Words& T_Lib_Words::operator = (const T_Lib_Words &lws)
{
    if(this!=&lws)
    {
        UI i;
        delete[] Words;
        AmountWord=lws.AmountWord;
        Words=new T_Lib_Word[AmountWord];
        for(i=0;i<AmountWord;i++)
        {
            Words[i]=lws.Words[i];
        }
    }
    return *this;
}
//---------------------------------------------------------------------------
char* T_Lib_Words::operator [] (const UI &k)
{
    if(k>=AmountWord)
    {
        return "";
    }
    return Words[k].GetWord();
}
//---------------------------------------------------------------------------
void T_Lib_Words::SaveToFile(FILE *f)const
{
    UI i;
    fwrite(&AmountWord,sizeof(UI),1,f);
    for(i=0;i<AmountWord;i++)
    {
        Words[i].SaveToFile(f);
    }
}
//---------------------------------------------------------------------------
void T_Lib_Words::LoadFromFile(FILE *f)
{
    UI i;
    fread(&AmountWord,sizeof(UI),1,f);
    Words=new T_Lib_Word[AmountWord];
    for(i=0;i<AmountWord;i++)
    {
        Words[i].LoadFromFile(f);
    }
}
//---------------------------------------------------------------------------
void T_Lib_Words::SaveToFile(const char *fname)const
{
    FILE *f=fopen(fname,"w");
    SaveToFile(f);
    fclose(f);
}
//---------------------------------------------------------------------------
void T_Lib_Words::LoadFromFile(const char *fname)
{
    FILE *f=fopen(fname,"r");
    if(f)
    {
        LoadFromFile(f);
        fclose(f);
    }
}
//---------------------------------------------------------------------------
void T_Lib_Words::ChangeWord(const UI &k,const char *word)
{
    if(k<AmountWord)
    {
        Words[k]=T_Lib_Word(word);
    }
}
//---------------------------------------------------------------------------
UI T_Lib_Words::SearchWord(const char *word)const
{
    UI i=0;
    while(i<AmountWord && Words[i]!=word)
    {
        i++;
    }
    return i;
}
//---------------------------------------------------------------------------
void T_Lib_Words::DeleteWord(const UI &k)
{
    ChangeWord(k,"");
}
//---------------------------------------------------------------------------
UI T_Lib_Words::SearchFreeWord()const
{
    UI i=0;
    while(i<AmountWord && Words[i].GetSize()!=0)
    {
        i++;
    }
    return i;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
