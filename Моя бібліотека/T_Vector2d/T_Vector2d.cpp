//---------------------------------------------------------------------------
#pragma hdrstop
#include "T_Vector2d.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
TbVector2d::TbVector2d()
{
    X=0;
    Y=0;
}
//---------------------------------------------------------------------------
TbVector2d::TbVector2d(const TPoint &Point)
{
    X=Point.x;
    Y=Point.y;
}
//---------------------------------------------------------------------------
TbVector2d::TbVector2d(const double &x,const double &y)
{
    X=x;
    Y=y;
}
//---------------------------------------------------------------------------
bool TbVector2d::operator == (const TbVector2d &V)const
{
    return X==V.X && Y==V.Y;
}
//---------------------------------------------------------------------------
bool TbVector2d::operator != (const TbVector2d &V)const
{
    return X!=V.X || Y!=V.Y;
}
//---------------------------------------------------------------------------
TbVector2d TbVector2d::operator + (const TbVector2d &V)const
{
    return TbVector2d(X+V.X,Y+V.Y);
}
//---------------------------------------------------------------------------
TbVector2d TbVector2d::operator - (const TbVector2d &V)const
{
    return TbVector2d(X-V.X,Y-V.Y);
}
//---------------------------------------------------------------------------
TbVector2d TbVector2d::operator * (const double &d)const
{
    return TbVector2d(X*d,Y*d);
}
//---------------------------------------------------------------------------
TbVector2d TbVector2d::operator / (const double &d)const
{
    return TbVector2d(X*d,Y*d);
}
//---------------------------------------------------------------------------
double TbVector2d::Length()const
{
    return GetLength();
}
//---------------------------------------------------------------------------
double TbVector2d::GetSquareLength()const
{
    return X*X+Y*Y;
}
//---------------------------------------------------------------------------
double TbVector2d::GetLength()const
{
    return sqrt(GetSquareLength());
}
//---------------------------------------------------------------------------
double TbVector2d::GetAngleR()const
{
    double Angle=GetSignedAngleR();
    if(Angle<0)
    {
        Angle+=2*M_PI;
    }
    return Angle;
}
//---------------------------------------------------------------------------
double TbVector2d::GetSignedAngleR()const
{
    double Angle=0;
    if(X==0)
    {
        if(Y>=0)
        {
            Angle=M_PI/2;
        }
        else
        {
            Angle=-M_PI/2;
        }
    }
    else
    {
        if(Y==0)
        {
            if(X>0)
            {
                Angle=0;
            }
            else
            {
                Angle=M_PI;
            }
        }
        else
        {
            Angle=atan(Y/X);
            if(Y>0)
            {
                if(Angle<0)
                {
                    Angle+=M_PI;
                }
            }
            else
            {
                if(Angle>=0)
                {
                    Angle+=-M_PI;
                }
            }
        }
    }
    return Angle;
}
//---------------------------------------------------------------------------
double TbVector2d::Scalar(const TbVector2d &V)const
{
    return X*V.X+Y*V.Y;
}
//---------------------------------------------------------------------------
double TbVector2d::AngleBetween(const TbVector2d &V)const
{
    double Angle=0;
    double d=Length()*V.Length();
    if(d)
    {
        double sc=Scalar(V);
        Angle=acos(sc/d);
    }
    return Angle;
}
//---------------------------------------------------------------------------
double TbVector2d::GetAngleBetweenR(const TbVector2d &V)const
{
    return fabs(GetSignedAngleBetweenR(V));
}
//---------------------------------------------------------------------------
double TbVector2d::GetSignedAngleBetweenR(const TbVector2d &V)const
{
    double Angle;
    Angle=V.GetSignedAngleR()-GetSignedAngleR();
    if(Angle>M_PI)
    {
        Angle=Angle-2*M_PI;
    }
    return Angle;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::SetLength(const double &NewLength)
{
    float OldLength=Length();
    if(OldLength)
    {
        X=X/OldLength*NewLength;
        Y=Y/OldLength*NewLength;
    }
    return *this;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::Normalization()
{
    return SetLength(1.0);
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::Rotate(const double &Angle)
{
    *this=TbVector2d(X*cos(Angle)-Y*sin(Angle),X*sin(Angle)+Y*cos(Angle));
    return *this;
}
//---------------------------------------------------------------------------
TbVector2d::operator TPoint()const
{
    return TPoint(X,Y);
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::Init(const double &x,const double &y)
{
    X=x;
    Y=y;
    return *this;
}
//---------------------------------------------------------------------------
void TbVector2d::MoveTo(TCanvas *Canvas)const
{
    Canvas->MoveTo(X,Y);
}
//---------------------------------------------------------------------------
void TbVector2d::LineTo(TCanvas *Canvas)const
{
    Canvas->LineTo(X,Y);
}
//---------------------------------------------------------------------------
TbVector2d::operator bool()const
{
    return X || Y;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::operator += (const TbVector2d &V)
{
    return *this=*this+V;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::operator -= (const TbVector2d &V)
{
    return *this=*this-V;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::operator *= (const double &d)
{
    return *this=*this*d;
}
//---------------------------------------------------------------------------
TbVector2d& TbVector2d::operator /= (const double &d)
{
    return *this=*this/d;
}
//---------------------------------------------------------------------------
double TbVector2d::AngleR()const
{
    return GetAngleR();
}
//---------------------------------------------------------------------------
void TbVector2d::Reverse()
{
    X=-X;
    Y=-Y;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void GetLineCoefficientOnthePlane(const TbVector2d &Point1,const TbVector2d &Point2,
    double &A,double &B,double &C)
{
    A=Point2.Y-Point1.Y;
    B=Point1.X-Point2.X;
    C=-(Point1.Y*B+Point1.X*A);
}
//---------------------------------------------------------------------------
double GetDistanceFromPointToLine(const TbVector2d &Point,
    const TbVector2d &LinePoint1,const TbVector2d &LinePoint2)
{
    double A,B,C;
    double Distance=-1;
    GetLineCoefficientOnthePlane(LinePoint1,LinePoint2,A,B,C);
    if(fabs(A)+fabs(B)>0)
    {
        Distance=fabs(A*Point.X+B*Point.Y+C)/sqrt(A*A+B*B);
    }
    return Distance;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

