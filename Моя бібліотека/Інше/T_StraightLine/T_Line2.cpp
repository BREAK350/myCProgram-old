//---------------------------------------------------------------------------
#pragma hdrstop
#include "T_Line2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Line::T_Line(T_Point _A,T_Point _B)
{
    A=_A;
    B=_B;
}
//---------------------------------------------------------------------------
T_Line::T_Line(float xa,float ya,float xb,float yb):A(xa,ya),B(xb,yb)
{
}
//---------------------------------------------------------------------------
T_Line& T_Line::operator = (T_Line l)
{
    A=l.A;
    B=l.B;
    return *this;
}
//---------------------------------------------------------------------------
T_Line::T_Line(T_Point _B)
{
    A.Init(0,0);
    B=_B;
}
//---------------------------------------------------------------------------
T_Line T_Line::operator + (T_Point p)
{
    return T_Line(A+p,B+p);
}
//---------------------------------------------------------------------------
T_Line T_Line::operator - (T_Point p)
{
    return T_Line(A-p,B-p);
}
//---------------------------------------------------------------------------
float T_Line::Length()
{
    return A.Distance(B);
}
//---------------------------------------------------------------------------
float T_Line::ValueInPoint(float x)
{
    if(B.x-A.x!=0)
    {
        return A.y+(x-A.x)*(B.y-A.y)/(B.x-A.x);
    }
    return 0;
}
//---------------------------------------------------------------------------
float T_Line::ValueInPoint(T_Point p)
{
    return (p.x-A.x)*(B.y-A.y)-(p.y-A.y)*(B.x-A.x);
}
//---------------------------------------------------------------------------
float T_Line::LineEquation_GetA()
{
    return B.y-A.y;
}
//---------------------------------------------------------------------------
float T_Line::LineEquation_GetB()
{
    return A.x-B.x;
}
//---------------------------------------------------------------------------
float T_Line::LineEquation_GetC()
{
    return A.y*(B.x-A.x)-A.x*(B.y-A.y);
}
//---------------------------------------------------------------------------
T_Line T_Line::Rotate(T_Point p,float angle)
{
    T_Line L;
    L.A=(A-p).Rotate(angle);
    L.B=(B-p).Rotate(angle);
    return *this=L+p;
}
//---------------------------------------------------------------------------
T_Line T_Line::operator + (T_Line l)
{
    return T_Line(A+l.A,B+l.B);
}
//---------------------------------------------------------------------------
T_Line T_Line::operator - (T_Line l)
{
    return T_Line(A-l.A,B-l.B);
}
//---------------------------------------------------------------------------
void T_Line::Draw(TCanvas *Canvas)
{
    Canvas->MoveTo(A.x,A.y);
    Canvas->LineTo(B.x,B.y);
}
//---------------------------------------------------------------------------
float T_Line::Scalar(T_Line l)
{
    return (GetVector()).Scalar(l.GetVector());
}
//---------------------------------------------------------------------------
T_Point T_Line::GetVector()
{
    return T_Point(B-A);
}
//---------------------------------------------------------------------------
bool T_Line::isCrossingLines(T_Line l)
{
    if(GetAngleRadian()==l.GetAngleRadian())
    {
        return false;
    }
    return true;
}
//---------------------------------------------------------------------------
float T_Line::GetAngleRadian()
{
    float angle;
    angle=(GetVector()).GetAngleRadian();
    if(angle>=M_PI)
    {
        return angle-M_PI;
    }
    if(angle<0)
    {
        return angle+M_PI;
    }
    return angle;
}
//---------------------------------------------------------------------------
void T_Line::Draw(TCanvas *Canvas,const TColor &cl)
{
    TColor pen=Canvas->Pen->Color;
    Draw(Canvas);
    Canvas->Pen->Color=pen;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
