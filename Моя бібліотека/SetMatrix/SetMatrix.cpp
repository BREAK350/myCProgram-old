//---------------------------------------------------------------------------
#pragma hdrstop
#include "SetMatrix.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Axonometric(const float &psi,const float &fi)
{
    return T_Matrix4(cos(psi),-sin(psi)*sin(fi),0,0,
                        0    ,     cos(fi)     ,0,0,
                     -sin(fi),-cos(psi)*sin(fi),0,0,
                        0    ,        0        ,0,1);
}
/*
    повертає матрицю аксонометричного проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Oblique(const float &alpha,const float &betta)
{
    float l=cos(betta)/sin(betta);
    return T_Matrix4(      1     ,      0     ,0,0,
                           0     ,      1     ,0,0,
                     l*cos(alpha),l*sin(alpha),0,0,
                           0     ,      0     ,0,1);
}
/*
    повертає матрицю косокутного проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Isometric()
{
    return T_Matrix4(0.707 ,-0.408,0,0,
                       0   ,0.816 ,0,0,
                     -0.707,-0.408,0,0,
                       0   ,   0  ,0,1);
}
/*
    повертає матрицю ізометричного проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::RotationX(const float &fi)
{
    return T_Matrix4(1,     0,      0,      0,
                     0,  cos(fi), sin(fi),  0,
                     0,  -sin(fi),cos(fi),  0,
                     0,     0,      0,      1);
}
/*
    повертає матрицю повороту навколо вісі X
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::RotationY(const float &fi)
{
    return T_Matrix4(cos(fi),  0,-sin(fi), 0,
                        0,     1,   0,     0,
                     sin(fi),  0,cos(fi),  0,
                        0,     0,    0,    1);
}
/*
    повертає матрицю повороту навколо вісі Y
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::RotationZ(const float &fi)
{
    return T_Matrix4(cos(fi),  sin(fi), 0,  0,
                     -sin(fi), cos(fi), 0,  0,
                        0,        0,    1,  0,
                        0,        0,    0,  1);
}
/*
    повертає матрицю повороту навколо вісі Z
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Pab(const float &a,const float &b)
{
    return T_Matrix4(1,0,0,-1/a,
                     0,1,0,-1/b,
                     0,0,1,  0,
                     0,0,0,  1);
}
/*
    повертає матрицю двоточкового проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::T(const float &x,const float &y,const float &z)
{
    return T_Matrix4(1,0,0,0,
                     0,1,0,0,
                     0,0,1,0,
                     x,y,z,1);
}
/*
    повертає матрицю зсуву
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::D(const float &x,const float &y,const float &z)
{
    return T_Matrix4(x,0,0,0,
                     0,y,0,0,
                     0,0,z,0,
                     0,0,0,1);
}
/*
    повертає матрицю масштабування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Pc(const float &c)
{
    return T_Matrix4(1,0,0,0,
                     0,1,0,0,
                     0,0,1,-1/c,
                     0,0,0,1);
}
/*
    повертає матрицю одноточкового проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Cabinet()
{
    return T_Matrix4(  1,    0,  0,0,
                       0,    1,  0,0,
                     0.354,0.354,0,0,
                       0,    0,  0,1);
}
/*
    повертає матрицю кабінетного проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Px()
{
    return T_Matrix4(0,0,0,0,
                     0,1,0,0,
                     0,0,1,0,
                     0,0,0,1);
}
/*
    повертає матрицю ортогонального проектування на площину yОz
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Py()
{
    return T_Matrix4(1,0,0,0,
                     0,0,0,0,
                     0,0,1,0,
                     0,0,0,1);
}
/*
    повертає матрицю ортогонального проектування на площину xОz
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Pz()
{
    return T_Matrix4(1,0,0,0,
                     0,1,0,0,
                     0,0,0,0,
                     0,0,0,1);
}
/*
    повертає матрицю ортогонального проектування на площину xОy
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Dymetriya()
{
    return T_Matrix4(0.935,-0.118,0,0,
                       0,   0.943,0,0,
                    -0.354,-0.312,0,0,
                       0,   0,    0,1);
}
/*
    повертає матрицю диметричного проектування
*/
//---------------------------------------------------------------------------
T_Matrix4 SetMatrix::Pabc(const float &a,const float &b,const float &c)
{
    return T_Matrix4(1,0,0,-1/a,
                     0,1,0,-1/b,
                     0,0,1,-1/c,
                     0,0,0,1);
}
/*
    повертає матрицю триточкового проектування
*/
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
