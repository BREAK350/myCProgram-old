//---------------------------------------------------------------------------
#pragma hdrstop
#include "T_Projection.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
/*******************************T_2D****************************************/
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
T_2D::T_2D(const T_Point2D &p)
{
    C[0]=p.x;
    C[1]=p.y;
    C[2]=1;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
T_2D::T_2D(const T_2D &p)
{
    C[0]=p.C[0];
    C[1]=p.C[1];
    C[2]=p.C[2];
}
//---------------------------------------------------------------------------
T_2D::T_2D(const TPoint &p)
{
    C[0]=p.x;
    C[1]=p.y;
    C[2]=1;
}
//---------------------------------------------------------------------------
T_2D::T_2D(const T_Point &p)
{
    C[0]=p.X;
    C[1]=p.Y;
    C[2]=1;
}
//---------------------------------------------------------------------------
T_2D& T_2D::operator = (const T_2D &p)
{
    C[0]=p.C[0];
    C[1]=p.C[1];
    C[2]=p.C[2];
    return *this;
}
//---------------------------------------------------------------------------
T_2D::operator T_Point()
{
    return T_Point(C[0]/C[2],C[1]/C[2]);
}
//---------------------------------------------------------------------------
T_2D::T_2D(const double &x,const double &y)
{
    C[0]=x;
    C[1]=y;
    C[2]=1;
}
//---------------------------------------------------------------------------
T_2D& T_2D::Rotation(const double &fi)  
{                                       //  cos(fi) sin(fi) 0
    double x=C[0]*cos(fi)-C[1]*sin(fi), // -sin(fi) cos(fi) 0
           y=C[0]*sin(fi)+C[1]*cos(fi); //     0       0    1
    C[0]=x;
    C[1]=y;
    return *this;
}
//---------------------------------------------------------------------------
T_2D& T_2D::Dilation(const double &a,const double &b)
{                                                    //  a 0 0
    C[0]=C[0]*a;                                     //  0 b 0
    C[1]=C[1]*b;                                     //  0 0 1
    return *this;
}
//---------------------------------------------------------------------------
T_2D& T_2D::Translation(const double &m,const double &n)
{                                                   //  1 0 0
    C[0]+=C[2]*m;                                   //  0 1 0
    C[1]+=C[2]*n;                                   //  m n 1
    return *this;   
}
//---------------------------------------------------------------------------
T_2D& T_2D::Rotation(const double &m,const double &n,const double &fi)
{
    Translation(-m,-n);
    Rotation(fi);
    Translation(m,n);
    return *this;
}
//---------------------------------------------------------------------------
T_2D& T_2D::Dilation(const double &a,const double &b,const double &m,const double &n)
{
    Translation(-m,-n);
    Dilation(a,b);
    Translation(m,n);
    return *this;
}
//---------------------------------------------------------------------------
T_2D& T_2D::Reflection()
{
    C[1]=-C[1];
    return *this;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*******************************T_3D****************************************/
//---------------------------------------------------------------------------
T_3D::T_3D(const double &x,const double &y,const double &z)
{
    C[0]=x;
    C[1]=y;
    C[2]=z;
    C[3]=1;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Rz(const double &x)
{
    T_2D d(C[0],C[1]);
    d.Rotation(x);
    C[0]=d.C[0];
    C[1]=d.C[1];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Rx(const double &fi)
{
    T_2D d(C[1],C[2]);
    d.Rotation(fi);
    C[1]=d.C[0];
    C[2]=d.C[1];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Ry(const double &psi)
{
    T_2D d(C[1],C[3]);
    d.Rotation(-psi);
    C[1]=d.C[0];
    C[3]=d.C[1];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::D(const double &a,const double &b,const double &c)
{
    C[0]=C[0]*a;
    C[1]=C[1]*b;
    C[2]=C[2]*c;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Mxy()
{
    C[2]=-C[2];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Myz()
{
    C[0]=-C[0];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Mxz()
{
    C[1]=-C[1];
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::T(const double &l,const double &m,const double &n)
{
    C[0]+=C[3]*l;
    C[1]+=C[3]*m;
    C[2]+=C[3]*n;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::R(double a,double b,double c,const double &fi)
{
    double s=sqrt(a*a+b*b+c*c);
           a=a/s;
           b=b/s;
           c=c/s;
    double sn=sin(fi),
           cs=cos(fi);
    double x=C[0]*(a*a+(1-a*a)*cs)+C[1]*(a*(1-cs)*b-c*sn)+C[2]*(a*(1-cs)*c+b*sn),
           y=C[0]*(a*(1-cs)*b+c*sn)+C[1]*(b*b+(1-b*b)*cs)+C[2]*(b*(1-cs)*c-a*sn),
           z=C[0]*(a*(1-cs)*c-b*sn)+C[1]*(b*(1-cs)*c+a*sn)+C[2]*(c*c+cs*(1-c*c));
    C[0]=x;
    C[1]=y;
    C[2]=z;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::R(const double &x0,const double &y0,const double &z0,
              const double &a,const double &b,const double &c,const double &fi)
{
    T(-x0,-y0,-z0);
    R(a,b,c,fi);
    T(x0,y0,z0);
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Pz()
{
    C[2]=0;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Px()
{
    C[0]=0;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Py()
{
    C[1]=0;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::A(const double &psi,const double &fi)
{
    Ry(-psi);
    Rx(fi);
    Pz();
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Kz(const double &px,const double &py,const double &pz)
{
    C[0]=C[0]+C[2]*px/pz;
    C[1]=C[1]+C[2]*py/pz;
    C[2]=0;
    return *this;
}
//---------------------------------------------------------------------------
T_3D::T_3D(const T_Point3D &p)
{
    C[0]=p.x;
    C[1]=p.y;
    C[2]=p.z;
    C[3]=1;
}
//---------------------------------------------------------------------------
T_3D& T_3D::operator = (const T_3D &p)
{
    C[0]=p.C[0];
    C[1]=p.C[1];
    C[2]=p.C[2];
    C[3]=p.C[3];
    return *this;
}
//---------------------------------------------------------------------------
T_3D::operator T_Point3D()
{
    return T_Point3D(C[0]/C[3],C[1]/C[3],C[2]/C[3]);
}
//---------------------------------------------------------------------------
T_3D& T_3D::Mv(const double &fi,const double &teta,const double &ro)
{
    double x=C[0]*(-sin(teta))+C[1]*cos(teta),
           y=C[0]*(-cos(fi)*cos(teta))+C[1]*(-cos(fi)*sin(teta))+C[2]*sin(fi),
           z=C[0]*(-sin(fi)*cos(teta))+C[1]*(-sin(fi)*sin(teta))+C[2]*(-cos(fi))+C[3]*ro;
    C[0]=x;
    C[1]=y;
    C[2]=z;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::M1(const double &f,const double &n,const double &c)
{
    double z=C[2]*(1/c*(f+n)/(f-n))+C[3]*(-1/c*2*f*n/(f-n));
           C[3]=C[2]/c;
    C[2]=z;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::Pab(const double &a,const double &b)
{
    double c=1-C[0]/a-C[1]/b;
    C[0]=C[0]/c;
    C[1]=C[1]/c;
    C[2]=C[2]/c;
    return *this;
}
//---------------------------------------------------------------------------
T_3D& T_3D::P1(const double &c)
{
    C[0]=C[0]*c/C[2];
    C[1]=C[1]*c/C[2];
    C[2]=c;
    return *this;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/******************************T_3D_Obj*************************************/
//---------------------------------------------------------------------------
void T_3D_Obj::Draw(TCanvas *Canvas,const TPoint &v,const double &s,const TPoint &o)
{
    int i;
    for(i=0;i<Link.NLink;i++)
    {
        if(Buf.Point[Link.Link[i].First].z>0 && Buf.Point[Link.Link[i].Second].z>0)
        {
            Canvas->MoveTo(Buf.Point[Link.Link[i].First].x*o.x*s+v.x,Buf.Point[Link.Link[i].First].y*o.y*s+v.y);
            Canvas->LineTo(Buf.Point[Link.Link[i].Second].x*o.x*s+v.x,Buf.Point[Link.Link[i].Second].y*o.y*s+v.y);
        }
    }
}
//---------------------------------------------------------------------------
void T_3D_Obj::Mv(const double &fi,const double &teta,const double &ro)
{
    int i;
    for(i=0;i<Const.NPoint;i++)
    {
        T_3D d(Buf.Point[i]);
        Buf.Point[i]=d.Mv(fi,teta,ro);
    }
}
//---------------------------------------------------------------------------
void T_3D_Obj::M1(const double &f,const double &n,const double &c)
{
    int i;
    for(i=0;i<Const.NPoint;i++)
    {
        T_3D d(Buf.Point[i]);
        Buf.Point[i]=d.M1(f,n,c);
    }
}
//---------------------------------------------------------------------------
void T_3D_Obj::Pab(const double &a,const double &b)
{
    int i;
    for(i=0;i<Const.NPoint;i++)
    {
        T_3D d(Buf.Point[i]);
        Buf.Point[i]=d.Pab(a,b);
    }
}
//---------------------------------------------------------------------------
void T_3D_Obj::P1(const double &c)
{
    int i;
    for(i=0;i<Const.NPoint;i++)
    {
        T_3D d(Buf.Point[i]);
        Buf.Point[i]=d.P1(c);
    }
}
//---------------------------------------------------------------------------
void T_3D_Obj::doCopy()
{
    int i;
    for(i=0;i<Const.NPoint;i++)
    {
        Buf.Point[i]=Const.Point[i];
    }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

