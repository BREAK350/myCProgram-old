//---------------------------------------------------------------------------
#pragma hdrstop
#include "NewGeometry.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
/*************************class TbMatrix_d**********************************/
TbMatrix_d::TbMatrix_d()
{
    RowCount=0;
    ColCount=0;
    Element=NULL;
}
//---------------------------------------------------------------------------
TbMatrix_d::TbMatrix_d(const int &RowCount,const int &ColCount)
{
    New(RowCount,ColCount);
    Fill(0.0);
}
//---------------------------------------------------------------------------
TbMatrix_d::TbMatrix_d(const TbMatrix_d &Matrix)
{
    New(Matrix.RowCount,Matrix.ColCount);
    Fill(Matrix.Element);
}
//---------------------------------------------------------------------------
TbMatrix_d::~TbMatrix_d()
{
    Delete();
    RowCount=0;
    ColCount=0;
    Element=NULL;
}
//---------------------------------------------------------------------------
TbMatrix_d& TbMatrix_d::operator = (const TbMatrix_d &Matrix)
{
    if(this!=&Matrix)
    {
        Delete();
        New(Matrix.RowCount,Matrix.ColCount);
        Fill(Matrix.Element);
    }
    return *this;
}
//---------------------------------------------------------------------------
TbMatrix_d TbMatrix_d::operator + (const TbMatrix_d &Matrix)
{
    TbMatrix_d R;
    if(RowCount==Matrix.RowCount && ColCount==Matrix.ColCount)
    {
        R.New(RowCount,ColCount);
        for(int i=0;i<RowCount;i++)
        {
            for(int j=0;j<ColCount;j++)
            {
                R.Element[i][j]=Element[i][j]+Matrix.Element[i][j];
            }
        }
    }
    return R;
}
//---------------------------------------------------------------------------
TbMatrix_d TbMatrix_d::operator - (const TbMatrix_d &Matrix)
{
    TbMatrix_d R;
    if(RowCount==Matrix.RowCount && ColCount==Matrix.ColCount)
    {
        R.New(RowCount,ColCount);
        for(int i=0;i<RowCount;i++)
        {
            for(int j=0;j<ColCount;j++)
            {
                R.Element[i][j]=Element[i][j]-Matrix.Element[i][j];
            }
        }
    }
    return R;
}
//---------------------------------------------------------------------------
TbMatrix_d& TbMatrix_d::operator += (const TbMatrix_d &Matrix)
{
    return *this=*this+Matrix;
}
//---------------------------------------------------------------------------
TbMatrix_d& TbMatrix_d::operator -= (const TbMatrix_d &Matrix)
{
    return *this=*this-Matrix;
}
//---------------------------------------------------------------------------
TbMatrix_d TbMatrix_d::operator * (const TbMatrix_d &Matrix)
{
    TbMatrix_d R;
    if(ColCount==Matrix.RowCount)
    {
        R.New(RowCount,Matrix.ColCount);
        R.Fill(0.0);
        for(int i=0;i<R.RowCount;i++)
        {
            for(int j=0;j<R.ColCount;j++)
            {
                for(int k=0;k<ColCount;k++)
                {
                    R.Element[i][j]+=Element[i][k]*Matrix.Element[k][j];
                }
            }
        }
    }
    return R;
}
//---------------------------------------------------------------------------
TbMatrix_d& TbMatrix_d::operator *= (const TbMatrix_d &Matrix)
{
    return *this=*this*Matrix;
}
//---------------------------------------------------------------------------
void TbMatrix_d::Delete()
{
    if(RowCount>0 && ColCount>0)
    {
        for(int i=0;i<RowCount;i++)
        {
            delete[] Element[i];
        }
        delete[] Element;
    }
}
//---------------------------------------------------------------------------
void TbMatrix_d::New(const int &RowCount,const int &ColCount)
{
    this->RowCount=(RowCount>0)?(RowCount):(0);
    this->ColCount=(ColCount>0)?(ColCount):(0);
    if(this->RowCount>0 && this->ColCount>0)
    {
        Element=new double* [this->RowCount];
        for(int i=0;i<this->RowCount;i++)
        {
            Element[i]=new double [this->ColCount];
        }
    }
    else
    {
        this->RowCount=0;
        this->ColCount=0;
        Element=NULL;
    }
}
//---------------------------------------------------------------------------
void TbMatrix_d::Fill(const double &f)
{
    for(int i=0;i<RowCount;i++)
    {
        for(int j=0;j<ColCount;j++)
        {
            Element[i][j]=f;
        }
    }
}
//---------------------------------------------------------------------------
void TbMatrix_d::Fill(double **E)
{
    for(int i=0;i<RowCount;i++)
    {
        for(int j=0;j<ColCount;j++)
        {
            Element[i][j]=E[i][j];
        }
    }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/**************************class TbMatrix_3d********************************/
TbMatrix_3d::TbMatrix_3d(const double &e00,const double &e01,const double &e02,
                    const double &e10,const double &e11,const double &e12,
                    const double &e20,const double &e21,const double &e22)
                    :TbMatrix_d(3,3)
{
    this->operator [](0)[0]=e00;
    this->operator [](0)[1]=e01;
    this->operator [](0)[2]=e02;
    this->operator [](1)[0]=e10;
    this->operator [](1)[1]=e11;
    this->operator [](1)[2]=e12;
    this->operator [](2)[0]=e20;
    this->operator [](2)[1]=e21;
    this->operator [](2)[2]=e22;
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::GetTranslation(const TbPoint2d &Vector)const
{
    return TbMatrix_3d(    1,      0,    0,
                           0,      1,    0,
                       Vector.x,Vector.y,1);
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::GetRotation(const double &fi)const
{
    return TbMatrix_3d(cos(fi), sin(fi),0,
                       -sin(fi),cos(fi),0,
                           0,      0,   1);
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::GetDilation(const TbPoint2d &Vector)const
{
    return TbMatrix_3d(Vector.x,    0,   0,
                           0,   Vector.y,0,
                           0,       0,   1);
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::GetReflectionX()const
{
    return TbMatrix_3d(1, 0,0,
                       0,-1,0,
                       0, 0,1);
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::GetReflectionY()const
{
    return TbMatrix_3d(-1,0,0,
                        0,1,0,
                        0,0,1);
}
//---------------------------------------------------------------------------
TbMatrix_3d TbMatrix_3d::operator * (const TbMatrix_3d &Matrix)
{
    TbMatrix_3d R;
    R.TbMatrix_d::operator =(this->TbMatrix_d::operator *(Matrix));
    return R;
}
//---------------------------------------------------------------------------
TbMatrix_3d& TbMatrix_3d::operator = (const TbMatrix_3d &Matrix)
{
    this->TbMatrix_d::operator =(Matrix);
    return *this;
}
//---------------------------------------------------------------------------
TbMatrix_d TbMatrix_3d::ToTbMatrix_d()const
{
    TbMatrix_d Matrix(GetRowCount(),GetColCount());
    for(int i=0;i<GetRowCount();i++)
    {
        for(int j=0;j<GetColCount();j++)
        {
            Matrix.operator [](i)[j]=this->operator [](i)[j];
        }
    }
    return Matrix;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/***********************class TbSelfPoint2d*********************************/
TbSelfPoint2d::operator TbPoint2d()const
{
    return TbPoint2d(this->operator [](0)[0]/this->operator [](0)[2],
                     this->operator [](0)[1]/this->operator [](0)[2]);
}
//---------------------------------------------------------------------------
TbSelfPoint2d& TbSelfPoint2d::operator = (const TbSelfPoint2d &Point)
{
    this->TbMatrix_d::operator =(Point);
    return *this;
}
//---------------------------------------------------------------------------
TbSelfPoint2d TbSelfPoint2d::operator * (const TbMatrix_3d &Matrix)
{
    TbSelfPoint2d R;
    R.TbMatrix_d::operator =(this->TbMatrix_d::operator *(Matrix.ToTbMatrix_d()));
    return R;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
double Distance(const TbPoint2d &point1,const TbPoint2d &point2)
{
    return sqrt((point1.x-point2.x)*(point1.x-point2.x)+
                (point1.x-point2.y)*(point1.x-point2.y));
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void Test()
{
    TbMatrix_3d M(2,0,0,
                  0,2,0,
                  0,0,1),M2;
    TbSelfPoint2d P1(3,4),P2(1,2),P;
    P=P1*M;
}
