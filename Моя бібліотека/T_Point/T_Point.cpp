//---------------------------------------------------------------------------
#pragma hdrstop
#include "T_Point.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
float T_Point::Distance(const T_Point &p)const
{
    return sqrt((X-p.X)*(X-p.X)+(Y-p.Y)*(Y-p.Y));
}
//---------------------------------------------------------------------------
T_Point::T_Point(const float &x,const float &y)
{
    X=x;
    Y=y;
}
//---------------------------------------------------------------------------
T_Point::T_Point(const TPoint &p)
{
    X=p.x;
    Y=p.y;
}
//---------------------------------------------------------------------------
T_Point::T_Point(const T_Point &p)
{
    X=p.X;
    Y=p.Y;
}
//---------------------------------------------------------------------------
T_Point::operator TPoint()const
{
    return TPoint(X,Y);
}
//---------------------------------------------------------------------------
T_Point& T_Point::operator = (const T_Point &p)
{
    X=p.X;
    Y=p.Y;
    return *this;
}
//---------------------------------------------------------------------------
bool T_Point::operator == (const T_Point &p)const
{
    return (X==p.X && Y==p.Y);
}
//---------------------------------------------------------------------------
bool T_Point::operator != (const T_Point &p)const
{
    return !(*this==p);
}
//---------------------------------------------------------------------------
void T_Point::Init(const float &x,const float &y)
{
    X=x;
    Y=y;
}
//---------------------------------------------------------------------------
T_Point::T_Point()
{
    X=Y=0;
}
//---------------------------------------------------------------------------
char* T_Point::toChar(const int &n)const
{
    if(n<0)
    {
        return NULL;
    }
    char buf[32];
    sprintf(buf,"(%1.2f;%1.2f)",X,Y);
    return strdup(buf);
}
//---------------------------------------------------------------------------
void T_Point::Draw(TCanvas *Canvas,const TColor &cl)const
{
    Canvas->Pixels[X][Y]=cl;
}
//---------------------------------------------------------------------------
int T_Point::Comparison(const T_Point &p)const
{
    if(X>=p.X)
    {
        if(Y>=p.Y)
        {
            return 1;
        }
        return 4;
    }
    if(Y>=p.Y)
    {
        return 2;
    }
    return 3;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 