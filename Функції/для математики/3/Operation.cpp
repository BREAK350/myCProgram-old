//---------------------------------------------------------------------------
#pragma hdrstop
#include "Operation.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
void _sin_(char **v,float *x,char *&s,float &a)
{
    if(v)
    {
        // sin(v[0])
    }
    else
    {
        a=sin(x[0]);
    }
}
//---------------------------------------------------------------------------
void _add_(char **v,float *x,char *&s,float &a)
{
    if(v[0])
    {
        if(v[1])
        {
            sprintf(s,"(%s)+(%s)",v[0],v[1]);
        }
        else
        {
            sprintf(s,"(%s)+(%f)",v[0],x[1]);
        }
    }
    else
    {
        if(v[1])
        {
            sprintf(s,"(%f)+(%s)",x[0],v[1]);
        }
        else
        {
            a=x[0]+x[1];
        }
    }
}
//---------------------------------------------------------------------------
TOperand::TOperand()
{
    Symbol=NULL;
    Value=0;
    Operation=NULL;
}
//---------------------------------------------------------------------------
TOperand::~TOperand()
{
    delete[] Symbol;
    delete Operation;
}
//---------------------------------------------------------------------------
int TOperand::isNumber()
{
    return(!Symbol && !Operation);
}
//---------------------------------------------------------------------------
float TOperand::GetValue()
{
    return Value;
}
//---------------------------------------------------------------------------
TOperation::TOperation()
{
    Name=NULL;
    Priority=0;
    N=0;
    Type=0;
    Operands=NULL;
    Func=NULL;
}
//---------------------------------------------------------------------------
TOperation::~TOperation()
{
    delete[] Name;
    delete[] Operands;
}
//---------------------------------------------------------------------------
void TOperand::Return(char *&s,float &a)
{
    if(Operation)
    {
        Operation->Return(s,a);
    }
    else
    {
        if(Symbol)
        {
            s=strdup(Symbol);
        }
        else
        {
            a=Value;
        }
    }
}
//---------------------------------------------------------------------------
void TOperation::Return(char *&s,float &a)
{
    int i;
    char **v=new char*[N];
    float *d=new float[N];
    for(i=0;i<N;i++)
    {
        v[i]=NULL;
        d[i]=0;
        Operands[i].Return(v[i],d[i]);
    }
    Func(v,d,s,a);
    for(i=0;i<N;i++)
    {
        delete v[i];
    }
    delete v;
    delete d;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
