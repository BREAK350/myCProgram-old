//---------------------------------------------------------------------------
#pragma hdrstop
#include "__func__.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
float _sin_(float x,float y)
{
    return sin(x);
}
//---------------------------------------------------------------------------
float _cos_(float x,float y)
{
    return cos(x);
}
//---------------------------------------------------------------------------
float _add_(float x,float y)
{
    return x+y;
}
//---------------------------------------------------------------------------
float _sub_(float x,float y)
{
    return x-y;
}
//---------------------------------------------------------------------------
float _mult_(float x,float y)
{
    return x*y;
}
//---------------------------------------------------------------------------
float _div_(float x,float y)
{
    return x/y;
}
//---------------------------------------------------------------------------
float _pow_(float x,float y)
{
    return pow(x,y);
}
//---------------------------------------------------------------------------
float _brk_(float x,float y)
{
    return 0;
}
//---------------------------------------------------------------------------
_FUNC_::_FUNC_()
{
    Name=NULL;
    func=NULL;
}
//---------------------------------------------------------------------------
_FUNC_::_FUNC_(char *name,_func_ f)
{
    Name=strdup(name);
    func=f;
}
//---------------------------------------------------------------------------
_FUNC_::~_FUNC_()
{
    delete Name;
    func=NULL;
}
//---------------------------------------------------------------------------
char* _FUNCS_::GetNameFunc(_func_ f)
{
    int i;
    for(i=0;i<N;i++)
    {
        if(f==F[i].GetFunc())
        {
            return F[i].GetName();
        }
    }
    return "";
}
//---------------------------------------------------------------------------
_func_ _FUNCS_::GetFunc(char *s,int &l,int &r)
{
    char *f;
    int i,j,k,p=l;
    while(l<=r && s[p]!='(')
    {
        p++;
    }
    while(r>=p && s[r-1]!=')')
    {
        r--;
    }
    if(p==r)
    {
        return NULL;
    }
    for(i=0;i<N;i++)
    {
        f=F[i].GetName();
        k=l;
        while(k<p && s[k]!=f[0])
        {
            k++;
        }
        if(k==p)
        {
            continue;
        }
        j=0;
        while(f[j] && f[j]==s[k+j])
        {
            j++;
        }
        if(f[j]==0 && (s[k+j]==' ' || s[k+j]=='(' || p==k+j))
        {
            l=p+1;
            return F[i].GetFunc();
        }
    }
    return NULL;
}
//---------------------------------------------------------------------------
int _FUNCS_::WhatIsIt(char *s,int &l,int &r,float &x,_func_ &f)
{
    /*
        Викликається, коли між l і r нема арифметичних дій.
        0-помилка
        1-число
        2-змінна
        3-дужки
        4-функція
    */
    int p=l,i,j,dl=l,dr=r;
    if(s[l]=='(' && s[r-1]==')')
    {
        l++;
        r--;
        return 3;
    }
    while(l<r && s[l]!='(')
    {
        l++;
    }
    if(l>=r)
    {
        // число або змінна
        char *number=new char[dr-dl+3];
        for(i=0;i<dr-dl;i++)
        {
            number[i]=s[dl+i];
        }
        number[i]=0;
        sscanf(number,"%f",&x);
        delete number;
        number=NULL;
        return 1;
    }
    else
    {
        // s[l]='(',s[r]=')'  якась функція
        while(r>=l && s[r]!=')')
        {
            r--;
        }
        for(i=0;i<N;i++)
        {
            char *fname=F[i].GetName();
            j=0;
            while(j<l && fname[j]==s[p+j])
            {
                j++;
            }
            if(j+p==l)
            {
                f=F[i].GetFunc();
                l++;
                return 4;
            }
        }
    }
    return 0;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
