//---------------------------------------------------------------------------
#pragma hdrstop
#include "Distance.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
T_Distance::TPoint T_Distance::NextPoint(const double &t0,const double &d)
{
    int kmax=1/Epsilon,k=0;
    TPoint Pt,p1=pFunction(t0);
    double l=t0,r=l+d,dd;
    do
    {
        dd=Dist(p1,Pt=pFunction(t=r));
        if(dd<d)
        {
            r=r+r-l;
            l=(r+l)/2;
        }
        else
        {
            if(dd>d)
            {
                r=(r+l)/2;
            }
        }
        k++;
    }
    while(fabs(dd-d)>Epsilon && k<kmax);
    return Pt;
}
//---------------------------------------------------------------------------
double T_Distance::Dist(const TPoint &p1,const TPoint &p2)
{
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
//---------------------------------------------------------------------------
double Normalization(const double &t)
{
    double norm_t=(t>=0)?(t):(-t);
    norm_t=norm_t-(int)(norm_t);
    if(t<0)
    {
        norm_t=1-norm_t;
    }
    return norm_t;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 