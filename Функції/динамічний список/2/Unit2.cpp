//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
/***************************************************************************/
/****************************__TListItem__**********************************/
/***************************************************************************/
TListItem::TListItem()
{
    next=NULL;
}
//---------------------------------------------------------------------------
void TListItem::AddItem(TListItem *Li)
{
    TListItem *r;
    if(Li->next)
    {
        return;
    }
    r=next;
    next=new TListItem;
    next->a=Li->a;
    next->next=r;
}
//---------------------------------------------------------------------------
void TListItem::AddItem(TComplex c)
{
    TListItem *r;
    r=next;
    next=new TListItem;
    next->a=c;
    next->next=r;
}
//---------------------------------------------------------------------------
void TListItem::operator=(TListItem *Li)
{
    if( Li->next || next )
    {
        return;
    }
    a=Li->a;
}
//---------------------------------------------------------------------------
void TListItem::Input()
{
    a.Input();
}
//---------------------------------------------------------------------------
void TListItem::operator=(const TComplex &c)
{
    a=c;
}
//---------------------------------------------------------------------------
void TListItem::Init(TComplex c)
{
    a=c;
}
//---------------------------------------------------------------------------
void TListItem::print()
{
    a.print();
}
//---------------------------------------------------------------------------
TListItem::~TListItem()
{
}
/***************************************************************************/
/******************************__TList__************************************/
/***************************************************************************/
TList::TList()
{
    first=NULL;
    n=0;
}
//---------------------------------------------------------------------------
TList::TList(const TList& L)
{

}
//---------------------------------------------------------------------------
void TList::Init(int n,TListItem *Li,...)
{
    if( n<=0 )
    {
        return;
    }
    TListItem *d,*p;
    int i;
    this->n=n;
    d=Li+1;
    first=new TListItem;
    first->operator =(Li);
    p=first;
    for(i=0;i<n-1;i++)
    {
        p->AddItem(d);
        d++;
        p=p->GetNext();
    }
}
//---------------------------------------------------------------------------
void TList::Init(int n,TComplex c,...)
{
    if( n<=0 )
    {
        return;
    }
    TListItem *d,*p;
    TComplex *C;
    int i;
    this->n=n;
    C=&c+1;
    first=new TListItem;
    first->operator =(c);
    p=first;
    for(i=0;i<n-1;i++)
    {
        p->AddItem(*C);
        d++;
        p=p->GetNext();
    }
}
//---------------------------------------------------------------------------
void TList::print()
{
    int i=0;
    TListItem *p;
    p=first;
    while(p)
    {
        p->print();
        switch(i)
        {
            case 0:
                cout<<'+';break;
            case 1:
                cout<<"x+";break;
            default:
                cout<<"x^"<<i<<'+';
        }

        p=p->GetNext();
        i++;
    }
}
//---------------------------------------------------------------------------
void TList::Input()
{
    int i;
    TListItem *p,d;
    do
    {
        cout<<"n=";
        cin>>n;
    }while(n<=0);
    d.Input();
    first=new TListItem;
    (*first)=d;
    p=first;
    for(i=1;i<n;i++)
    {
        d.Input();
        p->AddItem(&d);
        p=p->GetNext();
    }
}
//---------------------------------------------------------------------------
TList::~TList()
{
    TListItem *d;
    Delete(first);
}
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
void Delete(TListItem* L)
{
    if( L->next )
    {
        Delete(L->next);
    }
    delete[] L->next;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
/*/---------------------------------------------------------------------------
void TListItem::AddItem(TListItem *Li)
{
    TListItem *d,*p,*r;
    r=next;
    p=this;
    d=Li;
    while(d)
    {
        p->next=new TListItem;
        p->a=d->a;
        d=d->next;
        p=p->next;
    }
    p=r;
}
//--------------------------------------------------------------------------*/