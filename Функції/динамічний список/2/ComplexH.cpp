//---------------------------------------------------------------------------
#pragma hdrstop
#include "ComplexH.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void TComplex::Input()
{
    cout<<"u+v*i\nu, v = ";
    cin>>u>>v;
}
//---------------------------------------------------------------------------
TComplex::TComplex()
{
    u=v=0;
}
//---------------------------------------------------------------------------
void TComplex::Init(int _u,int _v)
{
    u=_u;
    v=_v;
}
//---------------------------------------------------------------------------
void TComplex::print()
{
    if( v>=0 )
    {
        cout<<'('<<u<<'+'<<v<<"i)";
    }
    else
    {
        cout<<'('<<u<<v<<"i)";
    }
}
//---------------------------------------------------------------------------
TComplex TComplex::operator + (const TComplex c)const
{
    TComplex r;
    r.Init(u+c.u,v+c.v);
    return r;
}
//---------------------------------------------------------------------------
TComplex TComplex::operator - (const TComplex c)const
{
    TComplex r;
    r.Init(u-c.u,v-c.v);
    return r;
}
//---------------------------------------------------------------------------
TComplex TComplex::operator * (const TComplex c)const
{
    TComplex r;
    r.Init(u*c.u-v*c.v,u*c.v+v*c.u);
    return r;
}
//---------------------------------------------------------------------------
bool TComplex::operator == (const TComplex c)const
{
    return ( u==c.u && v==c.v );
}
//---------------------------------------------------------------------------
TComplex& TComplex::operator = (const TComplex c)
{
    u=c.u;
    v=c.v;
    return *this;
}
//---------------------------------------------------------------------------
TComplex& TComplex::operator = (float f)
{
    u=f;
    v=0;
    return *this;
}
//---------------------------------------------------------------------------
TComplex operator * (TComplex c,float f)
{
    c.u=c.u*f;
    c.v=c.v*f;
    return c;
}
//---------------------------------------------------------------------------
TComplex operator * (float f,TComplex c)
{
    return c*f;
}
//---------------------------------------------------------------------------
TComplex operator + (TComplex c,float f)
{
    c.u=c.u+f;
    return c;
}
//---------------------------------------------------------------------------
TComplex operator + (float f,TComplex c)
{
    return c+f;
}
//---------------------------------------------------------------------------
TComplex operator - (TComplex c,float f)
{
    c.u=c.u-f;
    return c;
}
//---------------------------------------------------------------------------
TComplex operator - (float f,TComplex c)
{
    return c-f;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
 