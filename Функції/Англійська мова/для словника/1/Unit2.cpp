//---------------------------------------------------------------------------
#pragma hdrstop
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------
TWord::TWord()
{
    word=NULL;
    size=0;
}
//---------------------------------------------------------------------------
TWord::TWord(const TWord &W)
{
    word=strdup(W.word);
    size=W.size;
}
//---------------------------------------------------------------------------
TWord::TWord(const char *w)
{
    word=strdup(w);
    size=strlen(word);
}
//---------------------------------------------------------------------------
TWord::~TWord()
{
    delete word;
    size=0;
}
//---------------------------------------------------------------------------
void TWord::SaveToFile(FILE *fp)
{
    fwrite(&size,1,sizeof(char),fp);
    fwrite(word,size,sizeof(char),fp);
}
//---------------------------------------------------------------------------
void TWord::LoadFromFile(FILE *fp)
{                                             
    delete word;
    fread(&size,1,sizeof(char),fp);
    word=new char[size+1];
    fread(word,size,sizeof(char),fp);
}
//---------------------------------------------------------------------------
void TWord::Print()
{
    cout<<word;
}
//---------------------------------------------------------------------------
char* Space(char *s) // пропуск роздільників
{
    char *p;
    char r[]="0123456789 .,:;()-+_!?*^%<>~\\|/[]{}&@\"";
    while( *s )
    {
        p=r;
        while( *p && *p!=*s )
        {
            p++;
        }
        if( !*p )
        {
            return s;
        }
        s++;
    }
    return s;
}
//---------------------------------------------------------------------------
char* TrueWord(char *s)
{
    while( (*s>='A' && *s<='Z') || (*s>='a' && *s<='z') )
    {
        s++;
    }
    return s;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
